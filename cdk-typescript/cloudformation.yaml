Resources:
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/Resource
  VpcPublicSubnet1Subnet5C2D37C4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1a
      CidrBlock: 10.0.0.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet1/Subnet
  VpcPublicSubnet1RouteTable6C95E38E:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet1/RouteTable
  VpcPublicSubnet1RouteTableAssociation97140677:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet1/RouteTableAssociation
  VpcPublicSubnet1DefaultRoute3DA9E72A:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
      RouteTableId:
        Ref: VpcPublicSubnet1RouteTable6C95E38E
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet1/DefaultRoute
  VpcPublicSubnet1EIPD7E02669:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet1
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet1/EIP
  VpcPublicSubnet1NATGateway4D7517AA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet1EIPD7E02669
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet1Subnet5C2D37C4
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet1
    DependsOn:
      - VpcPublicSubnet1DefaultRoute3DA9E72A
      - VpcPublicSubnet1RouteTableAssociation97140677
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet1/NATGateway
  VpcPublicSubnet2Subnet691E08A3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1b
      CidrBlock: 10.0.32.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet2/Subnet
  VpcPublicSubnet2RouteTable94F7E489:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet2/RouteTable
  VpcPublicSubnet2RouteTableAssociationDD5762D8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet2/RouteTableAssociation
  VpcPublicSubnet2DefaultRoute97F91067:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
      RouteTableId:
        Ref: VpcPublicSubnet2RouteTable94F7E489
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet2/DefaultRoute
  VpcPublicSubnet2EIP3C605A87:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet2
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet2/EIP
  VpcPublicSubnet2NATGateway9182C01D:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet2EIP3C605A87
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet2Subnet691E08A3
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet2
    DependsOn:
      - VpcPublicSubnet2DefaultRoute97F91067
      - VpcPublicSubnet2RouteTableAssociationDD5762D8
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet2/NATGateway
  VpcPublicSubnet3SubnetBE12F0B6:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1c
      CidrBlock: 10.0.64.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet3
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet3/Subnet
  VpcPublicSubnet3RouteTable93458DBB:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet3
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet3/RouteTable
  VpcPublicSubnet3RouteTableAssociation1F1EDF02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPublicSubnet3RouteTable93458DBB
      SubnetId:
        Ref: VpcPublicSubnet3SubnetBE12F0B6
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet3/RouteTableAssociation
  VpcPublicSubnet3DefaultRoute4697774F:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
      RouteTableId:
        Ref: VpcPublicSubnet3RouteTable93458DBB
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet3/DefaultRoute
  VpcPublicSubnet3EIP3A666A23:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet3
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet3/EIP
  VpcPublicSubnet3NATGateway7640CD1D:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VpcPublicSubnet3EIP3A666A23
          - AllocationId
      SubnetId:
        Ref: VpcPublicSubnet3SubnetBE12F0B6
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PublicSubnet3
    DependsOn:
      - VpcPublicSubnet3DefaultRoute4697774F
      - VpcPublicSubnet3RouteTableAssociation1F1EDF02
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PublicSubnet3/NATGateway
  VpcPrivateSubnet1Subnet536B997A:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1a
      CidrBlock: 10.0.96.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: Gedac-Core/Vpc/PrivateSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet1/Subnet
  VpcPrivateSubnet1RouteTableB2C5B500:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PrivateSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet1/RouteTable
  VpcPrivateSubnet1RouteTableAssociation70C59FA6:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
      SubnetId:
        Ref: VpcPrivateSubnet1Subnet536B997A
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet1/RouteTableAssociation
  VpcPrivateSubnet1DefaultRouteBE02A9ED:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet1NATGateway4D7517AA
      RouteTableId:
        Ref: VpcPrivateSubnet1RouteTableB2C5B500
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet1/DefaultRoute
  VpcPrivateSubnet2Subnet3788AAA1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1b
      CidrBlock: 10.0.128.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: Gedac-Core/Vpc/PrivateSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet2/Subnet
  VpcPrivateSubnet2RouteTableA678073B:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PrivateSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet2/RouteTable
  VpcPrivateSubnet2RouteTableAssociationA89CAD56:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
      SubnetId:
        Ref: VpcPrivateSubnet2Subnet3788AAA1
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet2/RouteTableAssociation
  VpcPrivateSubnet2DefaultRoute060D2087:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet2NATGateway9182C01D
      RouteTableId:
        Ref: VpcPrivateSubnet2RouteTableA678073B
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet2/DefaultRoute
  VpcPrivateSubnet3SubnetF258B56E:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1c
      CidrBlock: 10.0.160.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: Gedac-Core/Vpc/PrivateSubnet3
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet3/Subnet
  VpcPrivateSubnet3RouteTableD98824C7:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc/PrivateSubnet3
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet3/RouteTable
  VpcPrivateSubnet3RouteTableAssociation16BDDC43:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcPrivateSubnet3RouteTableD98824C7
      SubnetId:
        Ref: VpcPrivateSubnet3SubnetF258B56E
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet3/RouteTableAssociation
  VpcPrivateSubnet3DefaultRoute94B74F0D:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VpcPublicSubnet3NATGateway7640CD1D
      RouteTableId:
        Ref: VpcPrivateSubnet3RouteTableD98824C7
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/PrivateSubnet3/DefaultRoute
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/VPCGW
  VpcS3Endpoint4A3DE4B5:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - Ref: VpcPrivateSubnet1RouteTableB2C5B500
        - Ref: VpcPrivateSubnet2RouteTableA678073B
        - Ref: VpcPrivateSubnet3RouteTableD98824C7
        - Ref: VpcPublicSubnet1RouteTable6C95E38E
        - Ref: VpcPublicSubnet2RouteTable94F7E489
        - Ref: VpcPublicSubnet3RouteTable93458DBB
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .s3
      VpcEndpointType: Gateway
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/S3Endpoint/Resource
  VpcDynamoDBEndpoint43D8F30A:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - Ref: VpcPrivateSubnet1RouteTableB2C5B500
        - Ref: VpcPrivateSubnet2RouteTableA678073B
        - Ref: VpcPrivateSubnet3RouteTableD98824C7
        - Ref: VpcPublicSubnet1RouteTable6C95E38E
        - Ref: VpcPublicSubnet2RouteTable94F7E489
        - Ref: VpcPublicSubnet3RouteTable93458DBB
      ServiceName:
        Fn::Join:
          - ""
          - - com.amazonaws.
            - Ref: AWS::Region
            - .dynamodb
      VpcEndpointType: Gateway
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/DynamoDBEndpoint/Resource
  VpcRestrictDefaultSecurityGroupCustomResourceC73DA2BE:
    Type: Custom::VpcRestrictDefaultSG
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E
          - Arn
      DefaultSecurityGroupId:
        Fn::GetAtt:
          - Vpc8378EB38
          - DefaultSecurityGroup
      Account: "862363609447"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/RestrictDefaultSecurityGroupCustomResource/Default
  VpcGedacLogsEndpointSecurityGroup56938A43:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gedac-Core/Vpc/GedacLogsEndpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - Vpc8378EB38
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - Vpc8378EB38
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacLogsEndpoint/SecurityGroup/Resource
  VpcGedacLogsEndpointC4CCE53A:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - Fn::GetAtt:
            - VpcGedacLogsEndpointSecurityGroup56938A43
            - GroupId
      ServiceName: com.amazonaws.ap-southeast-1.logs
      SubnetIds:
        - Ref: VpcPrivateSubnet1Subnet536B997A
        - Ref: VpcPrivateSubnet2Subnet3788AAA1
        - Ref: VpcPrivateSubnet3SubnetF258B56E
      VpcEndpointType: Interface
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacLogsEndpoint/Resource
  VpcGedacEcrDkrEndpointSecurityGroup7C84DE09:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gedac-Core/Vpc/GedacEcrDkrEndpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - Vpc8378EB38
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - Vpc8378EB38
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEcrDkrEndpoint/SecurityGroup/Resource
  VpcGedacEcrDkrEndpointB33D03DF:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - Fn::GetAtt:
            - VpcGedacEcrDkrEndpointSecurityGroup7C84DE09
            - GroupId
      ServiceName: com.amazonaws.ap-southeast-1.ecr.dkr
      SubnetIds:
        - Ref: VpcPrivateSubnet1Subnet536B997A
        - Ref: VpcPrivateSubnet2Subnet3788AAA1
        - Ref: VpcPrivateSubnet3SubnetF258B56E
      VpcEndpointType: Interface
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEcrDkrEndpoint/Resource
  VpcGedacEcrApiEndpointSecurityGroup057DE112:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gedac-Core/Vpc/GedacEcrApiEndpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - Vpc8378EB38
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - Vpc8378EB38
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEcrApiEndpoint/SecurityGroup/Resource
  VpcGedacEcrApiEndpoint26C90ACE:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - Fn::GetAtt:
            - VpcGedacEcrApiEndpointSecurityGroup057DE112
            - GroupId
      ServiceName: com.amazonaws.ap-southeast-1.ecr.api
      SubnetIds:
        - Ref: VpcPrivateSubnet1Subnet536B997A
        - Ref: VpcPrivateSubnet2Subnet3788AAA1
        - Ref: VpcPrivateSubnet3SubnetF258B56E
      VpcEndpointType: Interface
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEcrApiEndpoint/Resource
  VpcGedacEcsAgentEndpointSecurityGroup8E50A7F2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gedac-Core/Vpc/GedacEcsAgentEndpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - Vpc8378EB38
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - Vpc8378EB38
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEcsAgentEndpoint/SecurityGroup/Resource
  VpcGedacEcsAgentEndpointBE1421E3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - Fn::GetAtt:
            - VpcGedacEcsAgentEndpointSecurityGroup8E50A7F2
            - GroupId
      ServiceName: com.amazonaws.ap-southeast-1.ecs-agent
      SubnetIds:
        - Ref: VpcPrivateSubnet1Subnet536B997A
        - Ref: VpcPrivateSubnet2Subnet3788AAA1
        - Ref: VpcPrivateSubnet3SubnetF258B56E
      VpcEndpointType: Interface
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEcsAgentEndpoint/Resource
  VpcGedacEcsTelemEndpointSecurityGroup9D49573A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gedac-Core/Vpc/GedacEcsTelemEndpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - Vpc8378EB38
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - Vpc8378EB38
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEcsTelemEndpoint/SecurityGroup/Resource
  VpcGedacEcsTelemEndpoint73A86BEA:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - Fn::GetAtt:
            - VpcGedacEcsTelemEndpointSecurityGroup9D49573A
            - GroupId
      ServiceName: com.amazonaws.ap-southeast-1.ecs-telemetry
      SubnetIds:
        - Ref: VpcPrivateSubnet1Subnet536B997A
        - Ref: VpcPrivateSubnet2Subnet3788AAA1
        - Ref: VpcPrivateSubnet3SubnetF258B56E
      VpcEndpointType: Interface
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEcsTelemEndpoint/Resource
  VpcGedacEcsEndpointSecurityGroup34D053F5:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gedac-Core/Vpc/GedacEcsEndpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - Vpc8378EB38
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - Vpc8378EB38
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEcsEndpoint/SecurityGroup/Resource
  VpcGedacEcsEndpointBDD91B5F:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - Fn::GetAtt:
            - VpcGedacEcsEndpointSecurityGroup34D053F5
            - GroupId
      ServiceName: com.amazonaws.ap-southeast-1.ecs
      SubnetIds:
        - Ref: VpcPrivateSubnet1Subnet536B997A
        - Ref: VpcPrivateSubnet2Subnet3788AAA1
        - Ref: VpcPrivateSubnet3SubnetF258B56E
      VpcEndpointType: Interface
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEcsEndpoint/Resource
  VpcGedacEc2EndpointSecurityGroup05C639B7:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gedac-Core/Vpc/GedacEc2Endpoint/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp:
            Fn::GetAtt:
              - Vpc8378EB38
              - CidrBlock
          Description:
            Fn::Join:
              - ""
              - - "from "
                - Fn::GetAtt:
                    - Vpc8378EB38
                    - CidrBlock
                - :443
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value: Gedac-Core/Vpc
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEc2Endpoint/SecurityGroup/Resource
  VpcGedacEc2EndpointAD21CFF1:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - Fn::GetAtt:
            - VpcGedacEc2EndpointSecurityGroup05C639B7
            - GroupId
      ServiceName: com.amazonaws.ap-southeast-1.ec2
      SubnetIds:
        - Ref: VpcPrivateSubnet1Subnet536B997A
        - Ref: VpcPrivateSubnet2Subnet3788AAA1
        - Ref: VpcPrivateSubnet3SubnetF258B56E
      VpcEndpointType: Interface
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Vpc/GedacEc2Endpoint/Resource
  CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource:
                  - Fn::Join:
                      - ""
                      - - arn:aws:ec2:ap-southeast-1:862363609447:security-group/
                        - Fn::GetAtt:
                            - Vpc8378EB38
                            - DefaultSecurityGroup
    Metadata:
      aws:cdk:path: Gedac-Core/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role
  CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-862363609447-ap-southeast-1
        S3Key: ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
          - Arn
      Runtime: nodejs18.x
      Description: Lambda function for removing all inbound/outbound rules from the VPC default security group
    DependsOn:
      - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
    Metadata:
      aws:cdk:path: Gedac-Core/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler
      aws:asset:path: asset.ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a
      aws:asset:property: Code
  TableCD117FA1:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1_PK
          AttributeType: S
        - AttributeName: GSI1_SK
          AttributeType: S
        - AttributeName: LSI1_SK
          AttributeType: S
        - AttributeName: LSI2_SK
          AttributeType: S
        - AttributeName: LSI3_SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: gsi1
          KeySchema:
            - AttributeName: GSI1_PK
              KeyType: HASH
            - AttributeName: GSI1_SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: lsi1
          KeySchema:
            - AttributeName: PK
              KeyType: HASH
            - AttributeName: LSI1_SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: lsi2
          KeySchema:
            - AttributeName: PK
              KeyType: HASH
            - AttributeName: LSI2_SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: lsi3
          KeySchema:
            - AttributeName: PK
              KeyType: HASH
            - AttributeName: LSI3_SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TableName: Gedac
      TimeToLiveSpecification:
        AttributeName: expiry
        Enabled: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Gedac-Core/Table/Resource
  BatchArtifactsAwsCliLayer1CC86C5C:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: cdk-hnb659fds-assets-862363609447-ap-southeast-1
        S3Key: 3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip
      Description: /opt/awscli/aws
    Metadata:
      aws:cdk:path: Gedac-Core/BatchArtifacts/AwsCliLayer/Resource
      aws:asset:path: asset.3322b7049fb0ed2b7cbb644a2ada8d1116ff80c32dca89e6ada846b5de26f961.zip
      aws:asset:is-bundled: false
      aws:asset:property: Content
  BatchArtifactsCustomResourceAA86556A:
    Type: Custom::CDKBucketDeployment
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536
          - Arn
      SourceBucketNames:
        - cdk-hnb659fds-assets-862363609447-ap-southeast-1
      SourceObjectKeys:
        - 27c2cad9852e7403209fb473319ef4c4c526156b5ed4a3ed723bbf143418942c.zip
      DestinationBucketName: gedac-862363609447-ap-southeast-1
      DestinationBucketKeyPrefix: artifacts
      Prune: false
      UserMetadata:
        idempotency-key: 1.0.0
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Gedac-Core/BatchArtifacts/CustomResource/Default
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: Gedac-Core/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - arn:aws:s3:::cdk-hnb659fds-assets-862363609447-ap-southeast-1
              - arn:aws:s3:::cdk-hnb659fds-assets-862363609447-ap-southeast-1/*
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1/*
        Version: "2012-10-17"
      PolicyName: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF
      Roles:
        - Ref: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
    Metadata:
      aws:cdk:path: Gedac-Core/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-862363609447-ap-southeast-1
        S3Key: 2d56e153cac88d3e0c2f842e8e6f6783b8725bf91f95e0673b4725448a56e96d.zip
      Environment:
        Variables:
          AWS_CA_BUNDLE: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
      Handler: index.handler
      Layers:
        - Ref: BatchArtifactsAwsCliLayer1CC86C5C
      Role:
        Fn::GetAtt:
          - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
          - Arn
      Runtime: python3.9
      Timeout: 900
    DependsOn:
      - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF
      - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
    Metadata:
      aws:cdk:path: Gedac-Core/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource
      aws:asset:path: asset.2d56e153cac88d3e0c2f842e8e6f6783b8725bf91f95e0673b4725448a56e96d
      aws:asset:is-bundled: false
      aws:asset:property: Code
  WesAdapterZipKeyParameterCE036B53:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The s3 key for the wes_adapter zip file
      Name: /gedac/_common/WesAdapterZipKeyParameter
      Type: String
      Value: 6c8f192212172236f20ed3a5a68f69ed35664c434c78e6d5eafc6ff8cb999397.zip
    Metadata:
      aws:cdk:path: Gedac-Core/WesAdapterZipKeyParameter/Resource
  vpcA2121C38:
    Type: AWS::SSM::Parameter
    Properties:
      Description: VPC ID for Gedac
      Name: /gedac/_common/vpc
      Type: String
      Value:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/vpc/Resource
  bucket43879C71:
    Type: AWS::SSM::Parameter
    Properties:
      Description: S3 bucket which contains outputs, intermediate results, and other project-specific data
      Name: /gedac/_common/bucket
      Type: String
      Value: gedac-862363609447-ap-southeast-1
    Metadata:
      aws:cdk:path: Gedac-Core/bucket/Resource
  installedartifactss3rooturl8C1CE61F:
    Type: AWS::SSM::Parameter
    Properties:
      Description: S3 root url for batch assets
      Name: /gedac/_common/installed-artifacts/s3-root-url
      Type: String
      Value: s3://gedac-862363609447-ap-southeast-1/artifacts/batch-artifacts
    Metadata:
      aws:cdk:path: Gedac-Core/installed-artifacts--s3-root-url/Resource
  InfraSubnets06E8F9B3:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /gedac/_common/InfraSubnets
      Type: StringList
      Value:
        Fn::Join:
          - ","
          - - Ref: VpcPrivateSubnet1Subnet536B997A
            - Ref: VpcPrivateSubnet2Subnet3788AAA1
            - Ref: VpcPrivateSubnet3SubnetF258B56E
    Metadata:
      aws:cdk:path: Gedac-Core/InfraSubnets/Resource
  NumInfraSubnets35FDF285:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /gedac/_common/NumInfraSubnets
      Type: String
      Value: "3"
    Metadata:
      aws:cdk:path: Gedac-Core/NumInfraSubnets/Resource
  BatchTaskBatchSpotBatchRoleC8F97B60:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/CloudWatchAgentServerPolicy
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:CreateTags
                  - ec2:CreateVolume
                  - ec2:DescribeVolumes
                Effect: Allow
                Resource: arn:aws:ec2:ap-southeast-1:862363609447:volume/*
              - Action:
                  - ec2:AttachVolume
                  - ec2:ModifyInstanceAttribute
                Effect: Allow
                Resource:
                  - arn:aws:ec2:ap-southeast-1:862363609447:instance/*
                  - arn:aws:ec2:ap-southeast-1:862363609447:volume/*
              - Action: ec2:DeleteVolume
                Condition:
                  StringEquals:
                    aws:ResourceTag/application-name: gedac
                Effect: Allow
                Resource: arn:aws:ec2:ap-southeast-1:862363609447:volume/*
            Version: "2012-10-17"
          PolicyName: ebs-autoscaling
        - PolicyDocument:
            Statement:
              - Action: autoscaling:SetInstanceHealth
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: instance-health
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatchSpot/BatchRole/Resource
  BatchTaskBatchSpotBatchRoleDefaultPolicyCF18259B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1/*
              - arn:aws:s3:::ngi-igenomes
              - arn:aws:s3:::ngi-igenomes/*
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1/*
              - arn:aws:s3:::gedac-bucket-profile
              - arn:aws:s3:::gedac-bucket-profile/*
        Version: "2012-10-17"
      PolicyName: BatchTaskBatchSpotBatchRoleDefaultPolicyCF18259B
      Roles:
        - Ref: BatchTaskBatchSpotBatchRoleC8F97B60
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatchSpot/BatchRole/DefaultPolicy/Resource
  BatchTaskBatchSpotLaunchTemplate5941548D:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: Gedac-Core/Batch/TaskBatchSpot/LaunchTemplate
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: Gedac-Core/Batch/TaskBatchSpot/LaunchTemplate
        UserData:
          Fn::Base64: |
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

            --==MYBOUNDARY==
            Content-Type: text/cloud-config; charset="us-ascii"

            packages:
            - jq
            - grep
            - btrfs-progs
            - sed
            - git
            - unzip
            - amazon-cloudwatch-agent

            write_files:
            - permissions: '0644'
              path: /opt/aws/amazon-cloudwatch-agent/etc/config.json
              content: |
                {
                  "agent": {
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/amazon-cloudwatch-agent.log"
                          },
                          {
                            "file_path": "/var/log/cloud-init.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/cloud-init.log"
                          },
                          {
                            "file_path": "/var/log/cloud-init-output.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/cloud-init-output.log"
                          },
                          {
                            "file_path": "/var/log/ecs/ecs-init.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/ecs-init.log"
                          },
                          {
                            "file_path": "/var/log/ecs/ecs-agent.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/ecs-agent.log"
                          },
                          {
                            "file_path": "/var/log/ecs/ecs-volume-plugin.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/ecs-volume-plugin.log"
                          }
                        ]
                      }
                    }
                  }
                }

            runcmd:

            # start the amazon-cloudwatch-agent
            - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/config.json
            - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status | jq -r '.status' | grep -iw "running" || sleep 5 && /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/config.json
            - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status | jq -r '.status' | grep -iw "running" || sleep 10 && /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/config.json
            - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status | jq -r '.status' | grep -iw "running" || shutdown -P now

            # install aws-cli v2 and copy the static binary in an easy to find location for bind-mounts into containers
            - mkdir -p /opt/aws-cli/bin
            - curl -s --fail --retry 3 --retry-connrefused "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip" && unzip -q /tmp/awscliv2.zip -d /tmp && /tmp/aws/install -b /usr/bin && cp -a -f $(dirname $(find /usr/local/aws-cli -name 'aws' -type f))/. /opt/aws-cli/bin/
            - command -v aws || sleep 5 && curl -s --fail --retry 3 --retry-connrefused "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip" && unzip -q /tmp/awscliv2.zip -d /tmp && /tmp/aws/install -b /usr/bin && cp -a -f $(dirname $(find /usr/local/aws-cli -name 'aws' -type f))/. /opt/aws-cli/bin/
            - command -v aws || sleep 10 && curl -s --fail --retry 3 --retry-connrefused "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip" && unzip -q /tmp/awscliv2.zip -d /tmp && /tmp/aws/install -b /usr/bin && cp -a -f $(dirname $(find /usr/local/aws-cli -name 'aws' -type f))/. /opt/aws-cli/bin/
            - command -v aws || echo "Unable to install AWS CLI v2"

            # set environment variables for provisioning
            - export ARTIFACTS_NAMESPACE=gedac
            - echo "ARTIFACTS_NAMESPACE = $ARTIFACTS_NAMESPACE"
            - export INSTALLED_ARTIFACTS_S3_ROOT_URL=$(aws ssm get-parameter --name /${ARTIFACTS_NAMESPACE}/_common/installed-artifacts/s3-root-url --query 'Parameter.Value' --output text)
            - echo "INSTALLED_ARTIFACTS_S3_ROOT_URL = $INSTALLED_ARTIFACTS_S3_ROOT_URL"
            - export WORKFLOW_ORCHESTRATOR=nextflow
            - echo "WORKFLOW_ORCHESTRATOR = $WORKFLOW_ORCHESTRATOR"

            # enable ecs spot instance draining
            - echo ECS_ENABLE_SPOT_INSTANCE_DRAINING=true >> /etc/ecs/ecs.config

            # pull docker images only if missing
            - echo ECS_IMAGE_PULL_BEHAVIOR=prefer-cached >> /etc/ecs/ecs.config

            # Setup ecs additions
            - echo "setting up ecs additions"
            - mkdir -p /opt
            - cd /opt
            - echo "syncing ecs additions from $INSTALLED_ARTIFACTS_S3_ROOT_URL/ecs-additions/"
            - aws s3 sync ${INSTALLED_ARTIFACTS_S3_ROOT_URL}/ecs-additions/ ./ecs-additions && chmod a+x /opt/ecs-additions/provision.sh  
            - test -f ./ecs-additions/fetch_and_run.sh || sleep 5 && aws s3 sync ${INSTALLED_ARTIFACTS_S3_ROOT_URL}/ecs-additions/ ./ecs-additions && chmod a+x /opt/ecs-additions/provision.sh    
            - test -f ./ecs-additions/fetch_and_run.sh || sleep 10 && aws s3 sync ${INSTALLED_ARTIFACTS_S3_ROOT_URL}/ecs-additions/ ./ecs-additions && chmod a+x /opt/ecs-additions/provision.sh    
            - test -f ./ecs-additions/fetch_and_run.sh || echo "Unable to install ecs-additions"
            - echo "running provision script"
            - /opt/ecs-additions/provision.sh
            - echo "provision script completed with return code $?"
            --==MYBOUNDARY==--
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: Gedac-Core/Batch/TaskBatchSpot/LaunchTemplate
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatchSpot/LaunchTemplate/Resource
  BatchTaskBatchSpotComputeProfileD381F865:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: BatchTaskBatchSpotBatchRoleC8F97B60
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatchSpot/ComputeProfile/Resource
  BatchTaskBatchSpotComputeEnvironmentSecurityGroupDA700986:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gedac-Core/Batch/TaskBatchSpot/ComputeEnvironment/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatchSpot/ComputeEnvironment/SecurityGroup/Resource
  BatchTaskBatchSpotComputeEnvironmentInstanceProfile82D17A24:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: BatchTaskBatchSpotBatchRoleC8F97B60
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatchSpot/ComputeEnvironment/InstanceProfile
  BatchTaskBatchSpotComputeEnvironment8D22C825:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeResources:
        AllocationStrategy: SPOT_CAPACITY_OPTIMIZED
        InstanceRole:
          Fn::GetAtt:
            - BatchTaskBatchSpotComputeEnvironmentInstanceProfile82D17A24
            - Arn
        InstanceTypes:
          - c4.large
          - c4.xlarge
          - c4.2xlarge
          - c4.4xlarge
          - c5a.large
          - c5a.xlarge
          - c5a.2xlarge
          - c5a.4xlarge
          - c5.large
          - c5.xlarge
          - c5.2xlarge
          - c5.4xlarge
          - c5n.large
          - c5n.xlarge
          - c5n.2xlarge
          - c5n.4xlarge
          - m4.large
          - m4.xlarge
          - m4.2xlarge
          - m4.4xlarge
          - m5.large
          - m5.xlarge
          - m5.2xlarge
          - m5.4xlarge
          - m5a.large
          - m5a.xlarge
          - m5a.2xlarge
          - m5a.4xlarge
          - m5n.large
          - m5n.xlarge
          - m5n.2xlarge
          - m5n.4xlarge
          - r4.large
          - r4.xlarge
          - r4.2xlarge
          - r4.4xlarge
          - r5.large
          - r5.xlarge
          - r5.2xlarge
          - r5.4xlarge
          - r5a.large
          - r5a.xlarge
          - r5a.2xlarge
          - r5a.4xlarge
          - r5n.large
          - r5n.xlarge
          - r5n.2xlarge
          - r5n.4xlarge
          - optimal
        LaunchTemplate:
          LaunchTemplateId:
            Ref: BatchTaskBatchSpotLaunchTemplate5941548D
        MaxvCpus: 256
        MinvCpus: 0
        SecurityGroupIds:
          - Fn::GetAtt:
              - BatchTaskBatchSpotComputeEnvironmentSecurityGroupDA700986
              - GroupId
        Subnets:
          - Ref: VpcPrivateSubnet1Subnet536B997A
          - Ref: VpcPrivateSubnet2Subnet3788AAA1
          - Ref: VpcPrivateSubnet3SubnetF258B56E
        Type: SPOT
      ReplaceComputeEnvironment: false
      State: ENABLED
      Type: managed
      UpdatePolicy: {}
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatchSpot/ComputeEnvironment/Resource
  BatchTaskBatchSpotJobQueueCCF3EB71:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment:
            Fn::GetAtt:
              - BatchTaskBatchSpotComputeEnvironment8D22C825
              - ComputeEnvironmentArn
          Order: 1
      Priority: 1
      State: ENABLED
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatchSpot/JobQueue
  BatchTaskBatchBatchRoleE10D8E83:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/CloudWatchAgentServerPolicy
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:CreateTags
                  - ec2:CreateVolume
                  - ec2:DescribeVolumes
                Effect: Allow
                Resource: arn:aws:ec2:ap-southeast-1:862363609447:volume/*
              - Action:
                  - ec2:AttachVolume
                  - ec2:ModifyInstanceAttribute
                Effect: Allow
                Resource:
                  - arn:aws:ec2:ap-southeast-1:862363609447:instance/*
                  - arn:aws:ec2:ap-southeast-1:862363609447:volume/*
              - Action: ec2:DeleteVolume
                Condition:
                  StringEquals:
                    aws:ResourceTag/application-name: gedac
                Effect: Allow
                Resource: arn:aws:ec2:ap-southeast-1:862363609447:volume/*
            Version: "2012-10-17"
          PolicyName: ebs-autoscaling
        - PolicyDocument:
            Statement:
              - Action: autoscaling:SetInstanceHealth
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: instance-health
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatch/BatchRole/Resource
  BatchTaskBatchBatchRoleDefaultPolicy8D50CF5E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1/*
              - arn:aws:s3:::ngi-igenomes
              - arn:aws:s3:::ngi-igenomes/*
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1/*
              - arn:aws:s3:::gedac-bucket-profile
              - arn:aws:s3:::gedac-bucket-profile/*
        Version: "2012-10-17"
      PolicyName: BatchTaskBatchBatchRoleDefaultPolicy8D50CF5E
      Roles:
        - Ref: BatchTaskBatchBatchRoleE10D8E83
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatch/BatchRole/DefaultPolicy/Resource
  BatchTaskBatchLaunchTemplateE3FA20A1:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: Gedac-Core/Batch/TaskBatch/LaunchTemplate
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: Gedac-Core/Batch/TaskBatch/LaunchTemplate
        UserData:
          Fn::Base64: |
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

            --==MYBOUNDARY==
            Content-Type: text/cloud-config; charset="us-ascii"

            packages:
            - jq
            - grep
            - btrfs-progs
            - sed
            - git
            - unzip
            - amazon-cloudwatch-agent

            write_files:
            - permissions: '0644'
              path: /opt/aws/amazon-cloudwatch-agent/etc/config.json
              content: |
                {
                  "agent": {
                    "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log"
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/amazon-cloudwatch-agent.log"
                          },
                          {
                            "file_path": "/var/log/cloud-init.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/cloud-init.log"
                          },
                          {
                            "file_path": "/var/log/cloud-init-output.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/cloud-init-output.log"
                          },
                          {
                            "file_path": "/var/log/ecs/ecs-init.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/ecs-init.log"
                          },
                          {
                            "file_path": "/var/log/ecs/ecs-agent.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/ecs-agent.log"
                          },
                          {
                            "file_path": "/var/log/ecs/ecs-volume-plugin.log",
                            "log_group_name": "/aws/ecs/container-instance/gedac",
                            "log_stream_name": "/aws/ecs/container-instance/gedac/{instance_id}/ecs-volume-plugin.log"
                          }
                        ]
                      }
                    }
                  }
                }

            runcmd:

            # start the amazon-cloudwatch-agent
            - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/config.json
            - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status | jq -r '.status' | grep -iw "running" || sleep 5 && /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/config.json
            - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status | jq -r '.status' | grep -iw "running" || sleep 10 && /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/config.json
            - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -m ec2 -a status | jq -r '.status' | grep -iw "running" || shutdown -P now

            # install aws-cli v2 and copy the static binary in an easy to find location for bind-mounts into containers
            - mkdir -p /opt/aws-cli/bin
            - curl -s --fail --retry 3 --retry-connrefused "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip" && unzip -q /tmp/awscliv2.zip -d /tmp && /tmp/aws/install -b /usr/bin && cp -a -f $(dirname $(find /usr/local/aws-cli -name 'aws' -type f))/. /opt/aws-cli/bin/
            - command -v aws || sleep 5 && curl -s --fail --retry 3 --retry-connrefused "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip" && unzip -q /tmp/awscliv2.zip -d /tmp && /tmp/aws/install -b /usr/bin && cp -a -f $(dirname $(find /usr/local/aws-cli -name 'aws' -type f))/. /opt/aws-cli/bin/
            - command -v aws || sleep 10 && curl -s --fail --retry 3 --retry-connrefused "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip" && unzip -q /tmp/awscliv2.zip -d /tmp && /tmp/aws/install -b /usr/bin && cp -a -f $(dirname $(find /usr/local/aws-cli -name 'aws' -type f))/. /opt/aws-cli/bin/
            - command -v aws || echo "Unable to install AWS CLI v2"

            # set environment variables for provisioning
            - export ARTIFACTS_NAMESPACE=gedac
            - echo "ARTIFACTS_NAMESPACE = $ARTIFACTS_NAMESPACE"
            - export INSTALLED_ARTIFACTS_S3_ROOT_URL=$(aws ssm get-parameter --name /${ARTIFACTS_NAMESPACE}/_common/installed-artifacts/s3-root-url --query 'Parameter.Value' --output text)
            - echo "INSTALLED_ARTIFACTS_S3_ROOT_URL = $INSTALLED_ARTIFACTS_S3_ROOT_URL"
            - export WORKFLOW_ORCHESTRATOR=nextflow
            - echo "WORKFLOW_ORCHESTRATOR = $WORKFLOW_ORCHESTRATOR"

            # enable ecs spot instance draining
            - echo ECS_ENABLE_SPOT_INSTANCE_DRAINING=true >> /etc/ecs/ecs.config

            # pull docker images only if missing
            - echo ECS_IMAGE_PULL_BEHAVIOR=prefer-cached >> /etc/ecs/ecs.config

            # Setup ecs additions
            - echo "setting up ecs additions"
            - mkdir -p /opt
            - cd /opt
            - echo "syncing ecs additions from $INSTALLED_ARTIFACTS_S3_ROOT_URL/ecs-additions/"
            - aws s3 sync ${INSTALLED_ARTIFACTS_S3_ROOT_URL}/ecs-additions/ ./ecs-additions && chmod a+x /opt/ecs-additions/provision.sh  
            - test -f ./ecs-additions/fetch_and_run.sh || sleep 5 && aws s3 sync ${INSTALLED_ARTIFACTS_S3_ROOT_URL}/ecs-additions/ ./ecs-additions && chmod a+x /opt/ecs-additions/provision.sh    
            - test -f ./ecs-additions/fetch_and_run.sh || sleep 10 && aws s3 sync ${INSTALLED_ARTIFACTS_S3_ROOT_URL}/ecs-additions/ ./ecs-additions && chmod a+x /opt/ecs-additions/provision.sh    
            - test -f ./ecs-additions/fetch_and_run.sh || echo "Unable to install ecs-additions"
            - echo "running provision script"
            - /opt/ecs-additions/provision.sh
            - echo "provision script completed with return code $?"
            --==MYBOUNDARY==--
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: Gedac-Core/Batch/TaskBatch/LaunchTemplate
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatch/LaunchTemplate/Resource
  BatchTaskBatchComputeProfileA79E22AC:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: BatchTaskBatchBatchRoleE10D8E83
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatch/ComputeProfile/Resource
  BatchTaskBatchComputeEnvironmentSecurityGroup03DAEBCC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gedac-Core/Batch/TaskBatch/ComputeEnvironment/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatch/ComputeEnvironment/SecurityGroup/Resource
  BatchTaskBatchComputeEnvironmentInstanceProfile41C380DF:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: BatchTaskBatchBatchRoleE10D8E83
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatch/ComputeEnvironment/InstanceProfile
  BatchTaskBatchComputeEnvironmentCD449A62:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeResources:
        AllocationStrategy: BEST_FIT
        InstanceRole:
          Fn::GetAtt:
            - BatchTaskBatchComputeEnvironmentInstanceProfile41C380DF
            - Arn
        InstanceTypes:
          - c5.large
          - c5.xlarge
          - c5.2xlarge
          - c5.4xlarge
          - c5a.large
          - c5a.xlarge
          - c5a.2xlarge
          - c5a.4xlarge
          - c5n.large
          - c5n.xlarge
          - c5n.2xlarge
          - c5n.4xlarge
          - m5.large
          - m5.xlarge
          - m5.2xlarge
          - m5.4xlarge
          - m5a.large
          - m5a.xlarge
          - m5a.2xlarge
          - m5a.4xlarge
          - m5n.large
          - m5n.xlarge
          - m5n.2xlarge
          - m5n.4xlarge
          - r5.large
          - r5.xlarge
          - r5.2xlarge
          - r5.4xlarge
          - r5a.large
          - r5a.xlarge
          - r5a.2xlarge
          - r5a.4xlarge
          - r5n.large
          - r5n.xlarge
          - r5n.2xlarge
          - r5n.4xlarge
          - optimal
        LaunchTemplate:
          LaunchTemplateId:
            Ref: BatchTaskBatchLaunchTemplateE3FA20A1
        MaxvCpus: 256
        MinvCpus: 0
        SecurityGroupIds:
          - Fn::GetAtt:
              - BatchTaskBatchComputeEnvironmentSecurityGroup03DAEBCC
              - GroupId
        Subnets:
          - Ref: VpcPrivateSubnet1Subnet536B997A
          - Ref: VpcPrivateSubnet2Subnet3788AAA1
          - Ref: VpcPrivateSubnet3SubnetF258B56E
        Type: EC2
      ReplaceComputeEnvironment: false
      State: ENABLED
      Type: managed
      UpdatePolicy: {}
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatch/ComputeEnvironment/Resource
  BatchTaskBatchJobQueueD95AEF8D:
    Type: AWS::Batch::JobQueue
    Properties:
      ComputeEnvironmentOrder:
        - ComputeEnvironment:
            Fn::GetAtt:
              - BatchTaskBatchComputeEnvironmentCD449A62
              - ComputeEnvironmentArn
          Order: 1
      Priority: 1
      State: ENABLED
    Metadata:
      aws:cdk:path: Gedac-Core/Batch/TaskBatch/JobQueue
  nextflowengineNextflowEngineRoleB2B5C46F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - batch:SubmitJob
                  - batch:TerminateJob
                  - batch:tagResource
                Effect: Allow
                Resource:
                  - arn:aws:batch:ap-southeast-1:862363609447:job-definition/*
                  - Ref: BatchTaskBatchSpotJobQueueCCF3EB71
                Sid: "0"
            Version: "2012-10-17"
          PolicyName: NextflowBatchSubmitPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:GetLogEvents
                  - logs:GetQueryResults
                  - logs:StopQuery
                Effect: Allow
                Resource: "*"
                Sid: "0"
            Version: "2012-10-17"
          PolicyName: NextflowLogsPolicy
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/NextflowEngineRole/Resource
  nextflowengineNextflowEngineRoleNextflowHeadJobBatchPolicyF5F2A575:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - batch:Describe*
              - batch:ListJobs
              - batch:TerminateJob
            Effect: Allow
            Resource: "*"
          - Action:
              - batch:DeregisterJobDefinition
              - batch:RegisterJobDefinition
            Effect: Allow
            Resource: arn:aws:batch:ap-southeast-1:862363609447:job-definition/*
        Version: "2012-10-17"
      PolicyName: nextflowengineNextflowEngineRoleNextflowHeadJobBatchPolicyF5F2A575
      Roles:
        - Ref: nextflowengineNextflowEngineRoleB2B5C46F
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/NextflowEngineRole/NextflowHeadJobBatchPolicy/Resource
  nextflowengineNextflowEngineRoleDefaultPolicyA35D72EA:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1/*
              - arn:aws:s3:::ngi-igenomes
              - arn:aws:s3:::ngi-igenomes/*
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1
              - arn:aws:s3:::gedac-862363609447-ap-southeast-1/*
              - arn:aws:s3:::gedac-bucket-profile
              - arn:aws:s3:::gedac-bucket-profile/*
          - Action:
              - logs:GetLogEvents
              - logs:StartQuery
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - nextflowengineNextflowEngineEngineLogGroup4CF92446
                - Arn
        Version: "2012-10-17"
      PolicyName: nextflowengineNextflowEngineRoleDefaultPolicyA35D72EA
      Roles:
        - Ref: nextflowengineNextflowEngineRoleB2B5C46F
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/NextflowEngineRole/DefaultPolicy/Resource
  nextflowengineNextflowEngineEngineLogGroup4CF92446:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 731
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/NextflowEngine/EngineLogGroup/Resource
  nextflowengineNextflowEngineNexflowHeadJobDef71B7BB93:
    Type: AWS::Batch::JobDefinition
    Properties:
      ContainerProperties:
        Command: []
        Environment:
          - Name: NF_JOB_QUEUE
            Value:
              Ref: BatchTaskBatchSpotJobQueueCCF3EB71
          - Name: NF_WORKDIR
            Value: s3://gedac-bucket-profile/gedac/nextflow-execution/runs
          - Name: NF_LOGSDIR
            Value: s3://gedac-bucket-profile/gedac/nextflow-execution/logs
          - Name: AWS_METADATA_SERVICE_TIMEOUT
            Value: "10"
          - Name: AWS_METADATA_SERVICE_NUM_ATTEMPTS
            Value: "10"
        ExecutionRoleArn: ""
        Image:
          Fn::Join:
            - ""
            - - 862363609447.dkr.ecr.ap-southeast-1.
              - Ref: AWS::URLSuffix
              - /nextflow:23.10.1
        JobRoleArn:
          Fn::GetAtt:
            - nextflowengineNextflowEngineRoleB2B5C46F
            - Arn
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: nextflowengineNextflowEngineEngineLogGroup4CF92446
        Memory: 1024
        Vcpus: 1
      RetryStrategy:
        Attempts: 1
      Type: container
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/NextflowEngine/NexflowHeadJobDef
  nextflowengineNextflowAdapterRoleEE90E0FA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - batch:DescribeJobs
                  - batch:ListJobs
                  - logs:GetQueryResults
                Effect: Allow
                Resource: "*"
                Sid: "0"
            Version: "2012-10-17"
          PolicyName: NextflowDescribeJobsPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - batch:SubmitJob
                  - batch:TerminateJob
                  - batch:tagResource
                Effect: Allow
                Resource:
                  - arn:aws:batch:ap-southeast-1:862363609447:job-definition/*
                  - arn:aws:batch:ap-southeast-1:862363609447:job/*
                  - Ref: BatchTaskBatchJobQueueD95AEF8D
                  - Ref: nextflowengineNextflowEngineNexflowHeadJobDef71B7BB93
                Sid: "0"
            Version: "2012-10-17"
          PolicyName: NextflowSubmitJobsPolicy
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/NextflowAdapterRole/Resource
  nextflowengineNextflowAdapterRoleDefaultPolicyAF3EAFB1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - arn:aws:s3:::gedac-bucket-profile
              - arn:aws:s3:::gedac-bucket-profile/*
          - Action: logs:StartQuery
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - nextflowengineNextflowEngineEngineLogGroup4CF92446
                - Arn
        Version: "2012-10-17"
      PolicyName: nextflowengineNextflowAdapterRoleDefaultPolicyAF3EAFB1
      Roles:
        - Ref: nextflowengineNextflowAdapterRoleEE90E0FA
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/NextflowAdapterRole/DefaultPolicy/Resource
  nextflowengineNextflowWesAdapterLambda073B0D32:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-862363609447-ap-southeast-1
        S3Key: 6c8f192212172236f20ed3a5a68f69ed35664c434c78e6d5eafc6ff8cb999397.zip
      Environment:
        Variables:
          ENGINE_NAME: nextflow
          JOB_QUEUE:
            Ref: BatchTaskBatchJobQueueD95AEF8D
          JOB_DEFINITION:
            Ref: nextflowengineNextflowEngineNexflowHeadJobDef71B7BB93
          ENGINE_LOG_GROUP:
            Ref: nextflowengineNextflowEngineEngineLogGroup4CF92446
      Handler: index.handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - nextflowengineNextflowAdapterRoleEE90E0FA
          - Arn
      Runtime: python3.12
      Timeout: 60
    DependsOn:
      - nextflowengineNextflowAdapterRoleDefaultPolicyAF3EAFB1
      - nextflowengineNextflowAdapterRoleEE90E0FA
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/NextflowWesAdapterLambda/Resource
  nextflowengineNextflowWesAdapterLambdaLogRetentionA75A9190:
    Type: Custom::LogRetention
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A
          - Arn
      LogGroupName:
        Fn::Join:
          - ""
          - - /aws/lambda/
            - Ref: nextflowengineNextflowWesAdapterLambda073B0D32
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/NextflowWesAdapterLambda/LogRetention/Resource
  nextflowengineApiProxyAccessLogGroupFEEEC4D9:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 731
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/ApiProxy/AccessLogGroup/Resource
  nextflowengineApiProxyC3EEB7AB:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: API proxy endpoint for a service
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: gedacgedacnextflow-engineNextflowApiProxy
      Policy:
        Statement:
          - Action: execute-api:Invoke
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:aws:iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: execute-api:/*/*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/ApiProxy/Resource/Resource
  nextflowengineApiProxyDeployment6A601707081974675e353faa4d2848f3d3e1463c:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: API proxy endpoint for a service
      RestApiId:
        Ref: nextflowengineApiProxyC3EEB7AB
    DependsOn:
      - nextflowengineApiProxyproxyANYE1F51918
      - nextflowengineApiProxyproxy08E07661
      - nextflowengineApiProxyANY710E39ED
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/ApiProxy/Resource/Deployment/Resource
  nextflowengineApiProxyDeploymentStageprodD36851C7:
    Type: AWS::ApiGateway::Stage
    Properties:
      AccessLogSetting:
        DestinationArn:
          Fn::GetAtt:
            - nextflowengineApiProxyAccessLogGroupFEEEC4D9
            - Arn
        Format: '{"requestId":"$context.requestId","caller":"$context.identity.caller","callerAccountId":"$context.accountId","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","message":"$context.error.message","validationError":"$context.error.validationErrorString"}'
      DeploymentId:
        Ref: nextflowengineApiProxyDeployment6A601707081974675e353faa4d2848f3d3e1463c
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: /*
      RestApiId:
        Ref: nextflowengineApiProxyC3EEB7AB
      StageName: prod
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/ApiProxy/Resource/DeploymentStage.prod/Resource
  nextflowengineApiProxyproxy08E07661:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - nextflowengineApiProxyC3EEB7AB
          - RootResourceId
      PathPart: "{proxy+}"
      RestApiId:
        Ref: nextflowengineApiProxyC3EEB7AB
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/ApiProxy/Resource/Default/{proxy+}/Resource
  nextflowengineApiProxyproxyANYApiPermissionGedacCorenextflowengineApiProxy649F3427ANYproxy010F1867:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - nextflowengineNextflowWesAdapterLambda073B0D32
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:ap-southeast-1:862363609447:"
            - Ref: nextflowengineApiProxyC3EEB7AB
            - /
            - Ref: nextflowengineApiProxyDeploymentStageprodD36851C7
            - /*/*
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/ApiProxy/Resource/Default/{proxy+}/ANY/ApiPermission.GedacCorenextflowengineApiProxy649F3427.ANY..{proxy+}
  nextflowengineApiProxyproxyANYApiPermissionTestGedacCorenextflowengineApiProxy649F3427ANYproxyD68BA6E3:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - nextflowengineNextflowWesAdapterLambda073B0D32
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:ap-southeast-1:862363609447:"
            - Ref: nextflowengineApiProxyC3EEB7AB
            - /test-invoke-stage/*/*
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/ApiProxy/Resource/Default/{proxy+}/ANY/ApiPermission.Test.GedacCorenextflowengineApiProxy649F3427.ANY..{proxy+}
  nextflowengineApiProxyproxyANYE1F51918:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - arn:aws:apigateway:ap-southeast-1:lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - nextflowengineNextflowWesAdapterLambda073B0D32
                  - Arn
              - /invocations
      RequestParameters:
        method.request.path.proxy: true
      ResourceId:
        Ref: nextflowengineApiProxyproxy08E07661
      RestApiId:
        Ref: nextflowengineApiProxyC3EEB7AB
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/ApiProxy/Resource/Default/{proxy+}/ANY/Resource
  nextflowengineApiProxyANY710E39ED:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: MOCK
      ResourceId:
        Fn::GetAtt:
          - nextflowengineApiProxyC3EEB7AB
          - RootResourceId
      RestApiId:
        Ref: nextflowengineApiProxyC3EEB7AB
    Metadata:
      aws:cdk:path: Gedac-Core/nextflow-engine/ApiProxy/Resource/Default/ANY/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: Gedac-Core/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:DeleteRetentionPolicy
              - logs:PutRetentionPolicy
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      Roles:
        - Ref: LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: Gedac-Core/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource
  LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 900
      Code:
        S3Bucket: cdk-hnb659fds-assets-862363609447-ap-southeast-1
        S3Key: 4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35.zip
      Role:
        Fn::GetAtt:
          - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
          - Arn
    DependsOn:
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB
      - LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB
    Metadata:
      aws:cdk:path: Gedac-Core/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource
      aws:asset:path: asset.4e26bf2d0a26f2097fb2b261f22bb51e3f6b4b52635777b1e54edbd8e2d58c35
      aws:asset:is-bundled: false
      aws:asset:property: Code
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/21TTXPaMBD9LbkLNYFLr4TQDB3SupDhyqzlxSjYkkcfUI/H/70ryTHQyWnfPq1WT0+rKX+afeePD3CxE1GcJpXMebd1IE6MqH2HYsq7XSPY4qB22YJlPq+k2PpcoQvcFW20d/gOeYVX/srNrdVCgpNajcUBLFdZCL/AvYLDC7QsM/JM8Np4pRwawp8FScmQzR1pPdaoHBsYErtURaOlckPpmMZOBxB4W7NF4Y107avRvonS74g1eCWO71g3FSTJ90zPilZBrQvybbx9BD2zM/7sxQndM1ikbN8V2FS6DXKHlZeRYGAtOsvnIfSsgjovgHfxwBbNDo0N5m2lKit0Wv0gFdHOEVDpLc7Q1NKGTT2TUPNuo5O6GDNN7xjNHNBKWQdKYGb0QabC/yi6kK3DdBjSkIGBGsnP2GJM0uJaWjdyPcvBiSPv3kBBicVSTJfCLnTd0Aws1VkaraIB1Ohr9qfO/3j0OOAXPEglXbwYCsM32GgrnTZt9LnSpeXdWpfji46YwIYkqbQXGlmmmSFv0Lp5I6M9A7x5GmJvMvoeZRryCKheeyMwHk5W/W0/maFbwm/ojroIVEJ9z6513jpdf7ntfonan2WBJp4VJyVoIMeHedlXYVb29HVFJfn8YheVjOMTev72jsztmdIF8g/77Tx95DP+9PBhpZwYT67UyDcp/gMg8o81GAQAAA==
    Metadata:
      aws:cdk:path: Gedac-Core/CDKMetadata/Default
Outputs:
  VpcId:
    Value:
      Ref: Vpc8378EB38
  WESAdapterLambdaZipBucket:
    Value: cdk-hnb659fds-assets-862363609447-ap-southeast-1
    Export:
      Name: WESAdapterLambdaZipBucket
  TableName:
    Value:
      Ref: TableCD117FA1
  nextflowengineApiProxyEndpointF93CB1BD:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: nextflowengineApiProxyC3EEB7AB
          - .execute-api.ap-southeast-1.
          - Ref: AWS::URLSuffix
          - /
          - Ref: nextflowengineApiProxyDeploymentStageprodD36851C7
          - /
  AccessLogGroupName:
    Value:
      Ref: nextflowengineApiProxyAccessLogGroupFEEEC4D9
  AdapterLogGroupName:
    Value:
      Fn::GetAtt:
        - nextflowengineNextflowWesAdapterLambdaLogRetentionA75A9190
        - LogGroupName
  EngineLogGroupName:
    Value:
      Ref: nextflowengineNextflowEngineEngineLogGroup4CF92446
  WesUrl:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: nextflowengineApiProxyC3EEB7AB
          - .execute-api.ap-southeast-1.
          - Ref: AWS::URLSuffix
          - /
          - Ref: nextflowengineApiProxyDeploymentStageprodD36851C7
          - /
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

